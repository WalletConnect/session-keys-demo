import {
  KernelSmartAccount,
  createKernelAccountClient,
  createZeroDevPaymasterClient
} from '@zerodev/sdk'
import { type ClassValue, clsx } from 'clsx'
import { ENTRYPOINT_ADDRESS_V07 } from 'permissionless'
import { SmartAccount } from 'permissionless/accounts'
import { ENTRYPOINT_ADDRESS_V07_TYPE, EntryPoint } from 'permissionless/types'
import { twMerge } from 'tailwind-merge'
import { Hex, createPublicClient, http, numberToHex } from 'viem'
import { sepolia } from 'viem/chains'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function bufferToString(buff: ArrayBuffer): string {
  return Buffer.from(buff).toString('hex')
}

export function createPublicBundlerClient() {
  const projectId = process.env.NEXT_PUBLIC_ZERODEV_PROJECT_ID
  if (!projectId) {
    throw new Error('ZeroDev project id expected')
  }
  const bundlerRpc = http(`https://rpc.zerodev.app/api/v2/bundler/${projectId}`)

  return createPublicClient({
    transport: bundlerRpc
  })
}

export function createKernelClient(account: KernelSmartAccount<ENTRYPOINT_ADDRESS_V07_TYPE>) {
  const projectId = process.env.NEXT_PUBLIC_ZERODEV_PROJECT_ID
  if (!projectId) {
    throw new Error('ZeroDev project id expected')
  }
  const entryPoint = ENTRYPOINT_ADDRESS_V07
  return createKernelAccountClient({
    account,
    chain: sepolia,
    entryPoint: entryPoint,
    bundlerTransport: http(`https://rpc.zerodev.app/api/v2/bundler/${projectId}`),
    middleware: {
      sponsorUserOperation: async ({ userOperation }) => {
        const zerodevPaymaster = createZeroDevPaymasterClient({
          chain: sepolia,
          entryPoint: entryPoint,
          // Get this RPC from ZeroDev dashboard
          transport: http(`https://rpc.zerodev.app/api/v2/paymaster/${projectId}`)
        })
        return zerodevPaymaster.sponsorUserOperation({
          userOperation,
          entryPoint: entryPoint
        })
      }
    }
  })
}

export function getRandomBytes(n: number) {
  const QUOTA = 65536
  var a = new Uint8Array(n)
  for (var i = 0; i < n; i += QUOTA) {
    crypto.getRandomValues(a.subarray(i, i + Math.min(n - i, QUOTA)))
  }
  return a
}

export const PermissionBuilderSampleData = {
  address: '0x32e5033875F1744a6E85bCCf96625482E4295Cf5' as Hex,
  executions: [
    {
      target: '0x32e5033875F1744a6E85bCCf96625482E4295Cf5' as Hex,
      value: numberToHex(123),
      // DAI Transfer to random address
      callData:
        '0xa9059cbb000000000000000000000000aabbccddeeff00112233aabbccddeeff0011223300000000000000000000000000000000000000000000000002c68af0bb140000' as Hex
    }
  ],
  userOp: {
    sender: '0xce6e5a92132A407D969bF73aF11e99e47dd59afC',
    nonce: '0x7c42ac84921adc1250409c6ba61afe22a0f2a3bd0000000000000004',
    initCode: '0x',
    callData:
      '0x519454470000000000000000000000002d29e46018da800463152c7f0f3dfce3047d6b2c00000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024efef39a1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000',
    paymasterAndData: '0x',
    signature:
      '0x000000017C42aC84921Adc1250409c6ba61AfE22A0F2a3bdfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d29e46018da800463152c7f0f3dfce3047d6b2cefef39a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001acdd56afddbfa8b9ff4f2772199591630331bd91e35dfa9606cba28610aa91db',
    maxFeePerGas: '0x3b9ad232',
    maxPriorityFeePerGas: '0x3b9aca00',
    callGasLimit: '0x0',
    verificationGasLimit: '0x0',
    preVerificationGas: '0x0'
  },
  packedUserOpV7: {
    sender: '0xce6e5a92132A407D969bF73aF11e99e47dd59afC' as Hex,
    nonce: '0x7c42ac84921adc1250409c6ba61afe22a0f2a3bd0000000000000004' as Hex,
    initCode: '0x' as Hex,
    callData:
      '0x519454470000000000000000000000002d29e46018da800463152c7f0f3dfce3047d6b2c00000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024efef39a1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000' as Hex,
    accountGasLimits: '0x000000000000000000000000001e8480000000000000000000000000001e8480' as Hex, // V7
    preVerificationGas: '0x0' as Hex,
    gasFees: '0x000000000000000000000000001e8480000000000000000000000000001e8480' as Hex, // V7
    paymasterAndData: '0x' as Hex,
    signature:
      '0x000000017C42aC84921Adc1250409c6ba61AfE22A0F2a3bdfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d29e46018da800463152c7f0f3dfce3047d6b2cefef39a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001acdd56afddbfa8b9ff4f2772199591630331bd91e35dfa9606cba28610aa91db' as Hex
  }
}
